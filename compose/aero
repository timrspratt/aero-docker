#!/usr/bin/env bash

if [[ -L ${BASH_SOURCE[0]} ]]; then
    AERO_DOCKER_PATH="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}")")" && pwd -P)"
else
    AERO_DOCKER_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
fi

AERO_DOCKER_VERSION=$(cat "$AERO_DOCKER_PATH/.version")

if [ -f "$AERO_DOCKER_PATH/.runtime" ]; then
    AERO_DOCKER_RUNTIME=$(cat "$AERO_DOCKER_PATH/.runtime")
else
    AERO_DOCKER_RUNTIME=7.4
fi

UNAMEOUT="$(uname -s)"

case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo -e "Unsupported operating system [$UNAMEOUT]." >&2
    exit 1
fi

if test -t 1; then
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        RED="$(tput setaf 1)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

function display_help {
    echo "${BOLD}Aero Docker${NC}"
    echo "Version ${AERO_DOCKER_VERSION}"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  aero COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}Docker Commands:${NC}"
    echo "  ${GREEN}aero start${NC}                     Start the container services"
    echo "  ${GREEN}aero stop${NC}                      Stop the container services"
    echo "  ${GREEN}aero pause${NC}                     Pause the container services"
    echo "  ${GREEN}aero unpause${NC}                   Unpause the container services"
    echo "  ${GREEN}aero restart${NC}                   Restart the container services"
    echo "  ${GREEN}aero ps${NC}                        Display the status of all containers"
    echo
    echo "${YELLOW}Onboarding Commands:${NC}"
    echo "  ${GREEN}aero install${NC}                   Install and setup an new Aero store in the current directory"
    echo "  ${GREEN}aero setup${NC}                     Setup the current project to run through Aero Docker"
    echo "  ${GREEN}aero catalog:seed${NC}              Seed the sample catalog to the current Aero store"
    echo "  ${GREEN}aero theme:install ...${NC}         Setup the current project to run through Aero Docker"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}aero artisan ...${NC}               Run an Artisan command"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}aero php ...${NC}                   Run a snippet of PHP code"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}aero composer ...${NC}              Run a Composer command"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}aero npm ...${NC}                   Run a npm command"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}aero db${NC}                        Start a MySQL CLI session within the 'mariadb' container"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}aero shell${NC}                     Start a shell session within the application container"
    echo "  ${GREEN}aero bash${NC}                      Alias for 'aero shell'"

    exit 1
}

if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

PROJECT_NAME=$(basename "$PWD")
DOCKER_NAME="$PROJECT_NAME"

if [ -f "$AERO_DOCKER_PATH/.env.example" ]; then
    source "$AERO_DOCKER_PATH/.env.example"
fi
if [ -f "$AERO_DOCKER_PATH/.env" ]; then
    source "$AERO_DOCKER_PATH/.env"
fi
if [ -f "$PWD/.aero/.env" ]; then
    source "$PWD/.aero/.env"
fi

export PLATFORM=${PLATFORM}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}
export DB_USERNAME=${DB_USERNAME:-}
export DB_PASSWORD=${DB_PASSWORD:-}
export DB_PORT=${DB_PORT:-}
export WEB_PORT=${WEB_PORT:-}
export REDIS_PORT=${REDIS_PORT:-}
export ES_PORT=${ES_PORT:-}
export ES_MEMORY=${ES_MEMORY:-}
export AERO_DOCKER_PATH=${AERO_DOCKER_PATH:-.}

function update_check {
    LATEST_AERO_DOCKER_VERSION=$(curl -s https://raw.githubusercontent.com/timrspratt/aero-docker/1.x/compose/.version 2> /dev/null)

    if [ "$LATEST_AERO_DOCKER_VERSION" != "$AERO_DOCKER_VERSION" ]; then
        echo -e ""
        echo -e "+---------------------------------------------------------+"
        echo -e "| ${BOLD}${YELLOW}An update is available.${NC}                                 |" >&2
        echo -e "| Run \`aero self-update\` to update to the latest version. |"
        echo -e "+---------------------------------------------------------+"
        echo -e ""
    fi
}

function docker_compose {
    docker-compose -p "$DOCKER_NAME" "$@"
}

function ensure_docker_is_running {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Docker is not running.${NC}" >&2
        exit 1
    fi
}

function ensure_ports_are_available {
    PORT_REGEX=":$WEB_PORT-|:$DB_PORT-|:$REDIS_PORT-|:$ES_PORT-"
    EXISTING_PORTS=$(docker ps --format="{{.Ports}}" | grep -E -o ":[0-9]+-" | grep -E "$PORT_REGEX" 2> /dev/null)
    unset PORT_REGEX
    if [ -n "$EXISTING_PORTS" ]; then
        echo -e "${RED}The following ports are already in use:${NC}" >&2
        echo "$EXISTING_PORTS" | grep -E -o '[0-9]+' | sort | uniq
        unset EXISTING_PORTS
        exit 1
    fi
    EXISTING_PORTS=$(lsof -nP -iTCP:"$WEB_PORT" -iTCP:"$DB_PORT" -iTCP:"$REDIS_PORT" -iTCP:"$ES_PORT" -sTCP:LISTEN 2> /dev/null | awk '{print $9}' | grep -E -o ":[0-9]+$")
    if [ -n "$EXISTING_PORTS" ]; then
        echo -e "${RED}The following ports are already in use:${NC}" >&2
        echo "$EXISTING_PORTS" | grep -E -o '[0-9]+' | sort | uniq
        unset EXISTING_PORTS
        exit 1
    fi
    unset EXISTING_PORTS
}

function ensure_container_is_running {
    ensure_docker_is_running

    PSRESULT="$(docker_compose ps -q)"
    if docker_compose ps | grep "$DOCKER_NAME" | grep 'Exit\|exited'; then
        echo -e "${YELLOW}Shutting down old application containers...${NC}" >&2

        docker_compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi

    unset PSRESULT

    if [ $EXEC == "no" ]; then
        if [ $# -eq 0 ]; then
            echo -e "${RED}The application containers must be up and running to continue.${NC}" >&2
            echo -e "Run the command \`aero start\` and try again."
            exit 1
        else
            ensure_ports_are_available
            docker_compose up -d
            sleep 1
            ensure_container_is_running
        fi
    fi
}

function ensure_compose_exists {
    if [ ! -f "$PWD/docker-compose.yml" ]; then
        if [ -f "$AERO_DOCKER_PATH/$AERO_DOCKER_RUNTIME/docker-compose.yml" ]; then
            cp "$AERO_DOCKER_PATH/$AERO_DOCKER_RUNTIME/docker-compose.yml" "$PWD/docker-compose.yml"
        else
            echo -e "${RED}Invalid runtime.${NC}" >&2
            exit 1
        fi
    fi

    if [ ! -d "$PWD/.aero" ]; then
        cp -Rn "$AERO_DOCKER_PATH/$AERO_DOCKER_RUNTIME/.aero" "$PWD/.aero"
    fi
}

function install_theme {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Not enough arguments (missing: \"theme name\").${NC}" >&2
        exit 1
    fi

    COMMAND="php artisan theme:install $@;"

    docker_compose exec -u user app bash -ic "$COMMAND"
}

function install_aero {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Not enough arguments (missing: \"project name\").${NC}" >&2
        exit 1
    fi

    if docker_compose exec -u user \
        -e CONNECTIONS_DEFINED=true \
        -e DB_HOST=db \
        -e DB_DATABASE="$DB_DATABASE" \
        -e DB_USERNAME="$DB_USERNAME" \
        -e DB_PASSWORD="$DB_PASSWORD" \
        -e ELASTICSEARCH_CONNECTION=elasticsearch:9200 \
        app bash -ic "composer global require aerocommerce/cli:dev-master && aero new $1 --next;";
    then
        shopt -s dotglob
        mv "./$1" ./__tmp
        mv ./__tmp/* .
        rm -rf ./__tmp
    else
        rm -rf "./$1"
        exit 1
    fi
}

function configure_aero {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Not enough arguments (missing: \"project name\").${NC}" >&2
        exit 1
    fi

    create_database aero
    rm -rf "$PWD/storage/logs/aero.patch"

    if docker_compose exec -u user app composer "install"; then
        cp "$PWD/.env.example" "$PWD/.env"
    else
        exit 1
    fi

    if docker_compose exec -u user \
        -e CONNECTIONS_DEFINED=true \
        -e DB_HOST=db \
        -e DB_DATABASE="$DB_DATABASE" \
        -e DB_USERNAME="$DB_USERNAME" \
        -e DB_PASSWORD="$DB_PASSWORD" \
        -e ELASTICSEARCH_CONNECTION=elasticsearch:9200 \
        app bash -ic "php artisan aero:configure --no-interaction;";
    then
        docker_compose exec -u user app bash -ic " php artisan key:generate && php artisan aero:install --seed"
    else
        exit 1
    fi
}

function wait_for_db {
    if docker_compose exec db \
        bash -ic "mysqladmin --user=\"\$DB_USERNAME\" --password=\"\$DB_PASSWORD\" ping > /dev/null";
    then
        sleep 1
    else
        echo -e "${YELLOW}Waiting for database.${NC}" >&2
        sleep 2
        wait_for_db
    fi
}

function create_database {
    if [ $# -eq 0 ]; then
        echo -e "${RED}Not enough arguments (missing: \"database name\").${NC}" >&2
        exit 1
    fi

    wait_for_db

    DB_DATABASE="$1"
    if docker_compose exec db \
        bash -ic "mysql --user=\"\$DB_USERNAME\" --password=\"\$DB_PASSWORD\" -e \"CREATE DATABASE IF NOT EXISTS \\\`$DB_DATABASE\\\` CHARACTER SET utf8 COLLATE utf8_unicode_ci;\"";
    then
        echo -e "${GREEN}Database created.${NC}"
    else
        echo -e "${RED}There was a problem creating the database.${NC}"
        exit 1
    fi
}

function seed_catalog {
    docker_compose exec -u user \
            app bash -ic "php artisan aero:import:products:csv https://aero-data.s3.eu-west-2.amazonaws.com/products.csv"
}

function edit_env_defaults {
    if [ -f "$AERO_DOCKER_PATH/.env" ]; then
        vi "$AERO_DOCKER_PATH/.env"
    fi
}

function publish_project_env {
    if [ ! -f "$PWD/.aero/.env" ]; then
        mkdir -p "$PWD/.aero"
        cp "$AERO_DOCKER_PATH/.env.example" "$PWD/.aero/.env"
        cp -n "$AERO_DOCKER_PATH/.gitignore" "$PWD/.aero/.gitignore"
        vi "$PWD/.aero/.env"
    fi
}

if [ $# -gt 0 ]; then
    if [ "$1" == "start" ]; then
        update_check
        ensure_docker_is_running
        ensure_ports_are_available
        shift 1
        docker_compose up -d "$@"
    elif [ "$1" == "stop" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose down "$@"
    elif [ "$1" == "php" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec app php "$@"
    elif [ "$1" == "composer" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app composer "$@"
    elif [ "$1" == "npm" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app npm "$@"
    elif [ "$1" == "artisan" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app php artisan "$@"
    elif [ "$1" == "queue" ]; then
            update_check
            ensure_container_is_running
            shift 1
            docker_compose exec -u user app php artisan queue:work --queue=default,search,email,subscriptions --timeout=0
    elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app bash "$@"
    elif [ "$1" == "db" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec db bash -ic "mysql --user=\"\$DB_USERNAME\" --password=\"\$DB_PASSWORD\" $@"
    elif [ "$1" == "new" ]; then
        update_check
        shift 1
        if [ $# -eq 0 ]; then
            echo -e "${RED}Not enough arguments (missing: \"store name\").${NC}" >&2
            exit 1
        fi
        if [ -d "$PWD/$1" ]; then
            echo -e "${RED}A directory with this name already exists.${NC}"
            exit 1
        fi
        if [[ "$1" =~ [^a-zA-Z0-9\ \-] ]]; then
            echo -e "${RED}Store name must consist of alphanumeric characters only.${NC}" >&2
            exit 1
        fi
        ensure_ports_are_available
        mkdir "$PWD/$1"
        cd "$_" || exit 1
        $0 install
        $SHELL
    elif [ "$1" == "install" ]; then
        update_check
        if [ -f "$PWD/artisan" ]; then
            echo -e "${RED}The current directory is already a project.${NC}"
            exit 1
        fi
        if [[ "$PROJECT_NAME" =~ [^a-zA-Z0-9\ \-] ]]; then
            echo -e "${RED}Directory name must consist of alphanumeric characters only.${NC}" >&2
            exit 1
        fi
        ensure_compose_exists
        ensure_container_is_running true
        create_database aero
        if install_aero "$PROJECT_NAME"; then
            install_theme "aero/raw" "--name=raw" "--no-interaction"
        fi
    elif [ "$1" == "setup" ]; then
        update_check
        if [ ! -f "$PWD/.env.example" ]; then
            echo -e "${RED}The current directory is not a compatible project.${NC}"
            exit 1
        fi
        if [ -f "$PWD/.env" ]; then
            echo -e "${RED}The project appears to already have been setup.${NC}"
            exit 1
        fi
        ensure_compose_exists
        ensure_container_is_running true
        configure_aero "$PROJECT_NAME"
    elif [ "$1" == "theme:install" ]; then
        update_check
        ensure_container_is_running
        shift 1
        install_theme "$@"
    elif [ "$1" == "catalog:seed" ]; then
        update_check
        ensure_container_is_running
        seed_catalog
    elif [ "$1" == "env:defaults" ]; then
        update_check
        edit_env_defaults
    elif [ "$1" == "env:project" ]; then
        update_check
        publish_project_env
    elif [ "$1" == "version" ] || [ "$1" == "--version" ]; then
        update_check
        echo -e "Current Version: $AERO_DOCKER_VERSION" >&2
    elif [ "$1" == "self-update" ]; then
        if curl -s https://raw.githubusercontent.com/timrspratt/aero-docker/1.x/install.sh | bash -s 1;
        then
            echo -e "${GREEN}Updated!${NC}" >&2
        else
            echo -e "${RED}There was a problem updating.${NC}" >&2
            exit 1
        fi
    else
        docker_compose "$@"
    fi
fi
