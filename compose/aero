#!/usr/bin/env bash

WHITE='\033[1;37m'
NC='\033[0m'

if [[ -L ${BASH_SOURCE[0]} ]]; then
    AERO_DOCKER_PATH="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}")")" && pwd -P)"
else
    AERO_DOCKER_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"  
fi

AERO_DOCKER_VERSION=$(cat "$AERO_DOCKER_PATH/.version")

UNAMEOUT="$(uname -s)"

case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo -e "${WHITE}Unsupported operating system [$UNAMEOUT].${NC}" >&2
    exit 1
fi

TARGETARCH=$(uname -m)

case "${TARGETARCH}" in
    x86_64*)            PLATFORM=linux/amd64;;
    arm64*)             PLATFORM=linux/arm64/v8;;
    *)                  PLATFORM="UNKNOWN"
esac

if [ "$PLATFORM" == "UNKNOWN" ]; then
    echo -e "${WHITE}Unsupported chipset architecture [$TARGETARCH].${NC}" >&2
    exit 1
fi

DOCKER_COMPOSE_PATH=docker-compose.yml
PROJECT_NAME=$(basename "$PWD")
DOCKER_NAME="aero-$PROJECT_NAME"

if [[ "$TITLE" =~ [^a-zA-Z0-9\ ] ]]; then
    echo -e "${WHITE}Directory name must consist of alphanumeric characters only.${NC}" >&2
    exit 1
fi

if [ -f "$AERO_DOCKER_PATH/.aero/.env.example" ]; then
    source "$AERO_DOCKER_PATH/.aero/.env.example"
fi
if [ -f "$AERO_DOCKER_PATH/.env" ]; then
    source "$AERO_DOCKER_PATH/.env"
fi
if [ -f "$PWD/.aero/.env" ]; then
    source "$PWD/.aero/.env"
fi

if [ ! -f "$PWD/docker-compose.yml" ]; then
    DOCKER_COMPOSE_PATH="$AERO_DOCKER_PATH/$DOCKER_COMPOSE"
fi

export PLATFORM=${PLATFORM}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}
export PROJECT_PATH=${PROJECT_PATH:-$PWD}
export DB_USERNAME=${DB_USERNAME:-}
export DB_PASSWORD=${DB_PASSWORD:-}
export DB_PORT=${DB_PORT:-}
export WEB_PORT=${WEB_PORT:-}
export REDIS_PORT=${REDIS_PORT:-}
export ES_PORT=${ES_PORT:-}
export ES_MEMORY=${ES_MEMORY:-}
export AERO_DOCKER_PATH=${AERO_DOCKER_PATH:-.}

function update_check {
    LATEST_AERO_DOCKER_VERSION=$(curl -s https://raw.githubusercontent.com/timrspratt/aero-docker/master/compose/.version 2> /dev/null)

    if [ "$LATEST_AERO_DOCKER_VERSION" != "$AERO_DOCKER_VERSION" ]; then
        echo -e "${WHITE}An update is available.${NC}" >&2
        echo "Run 'aero self-update' to update to the latest version of Aero Docker."
    fi
}

function docker_compose {
    docker-compose -p "$DOCKER_NAME" -f "$DOCKER_COMPOSE_PATH" "$@"
}

function ensure_docker_is_running {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2
        exit 1
    fi
}

function ensure_container_is_running {
    ensure_docker_is_running

    PSRESULT="$(docker_compose ps -q)"
    if docker_compose ps | grep "$DOCKER_NAME" | grep 'Exit'; then
        echo -e "${WHITE}Shutting down old application containers...${NC}" >&2

        docker_compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi

    if [ $EXEC == "no" ]; then
        if [ $# -eq 0 ]; then
            echo -e "${WHITE}The application containers must be up and running to continue.${NC}" >&2
            echo "Run the command 'aero start' and try again."
            exit 1
        else
            docker_compose up -d
            sleep 1
            ensure_container_is_running
        fi
    fi
}

function install_theme {
    if [ $# -eq 0 ]; then
        echo -e "${WHITE}Not enough arguments (missing: \"theme name\").${NC}" >&2
        exit 1
    fi

    THEME_NAME=$2
    if [ -z "$THEME_NAME" ]; then
        THEME_NAME=$1
    fi

    COMMAND=""
    if ! < composer.json | grep "aerocommerce/theme-ui" > /dev/null 2>&1; then
        COMMAND="${COMMAND}composer require aerocommerce/theme-ui --dev;"
        COMMAND="${COMMAND}composer require aerocargo/listing-collections aerocommerce/components aerocommerce/account-area;"
        COMMAND="${COMMAND}php artisan migrate;"
    fi
    COMMAND="${COMMAND}php artisan theme:build $1 --config=vendor/aerocommerce/theme-ui/config/$THEME_NAME.yml -er;"

    docker_compose exec -u user app bash -ic "$COMMAND"
}

function install_aero {
    if [ $# -eq 0 ]; then
        echo -e "${WHITE}Not enough arguments (missing: \"project name\").${NC}" >&2
        exit 1
    fi

    if docker_compose exec -u user \
        -e CONNECTIONS_DEFINED=true \
        -e DB_HOST=db \
        -e DB_DATABASE="$DB_DATABASE" \
        -e DB_USERNAME="$DB_USERNAME" \
        -e DB_PASSWORD="$DB_PASSWORD" \
        -e ELASTICSEARCH_CONNECTION=elasticsearch:9200 \
        app bash -ic "composer global require aerocommerce/cli:dev-master && aero new $1 --next;";
    then
        shopt -s dotglob
        mv "./$1" ./__tmp
        mv ./__tmp/* .
        rm -rf ./__tmp
    else
        rm -rf "./$1"
        exit 1
    fi
}

function configure_aero {
    if [ $# -eq 0 ]; then
        echo -e "${WHITE}Not enough arguments (missing: \"project name\").${NC}" >&2
        exit 1
    fi

    create_database aero

    if docker_compose exec -u user app composer "install"; then
        rm -rf "$PWD/storage/logs/aero.patch"
        cp "$PWD/.env.example" "$PWD/.env"
    else
        exit 1
    fi

    if docker_compose exec -u user \
        -e CONNECTIONS_DEFINED=true \
        -e DB_HOST=db \
        -e DB_DATABASE="$DB_DATABASE" \
        -e DB_USERNAME="$DB_USERNAME" \
        -e DB_PASSWORD="$DB_PASSWORD" \
        -e ELASTICSEARCH_CONNECTION=elasticsearch:9200 \
        app bash -ic "php artisan aero:configure --no-interaction;";
    then
        docker_compose exec -u user app bash -ic " php artisan key:generate && php artisan aero:install --seed"
    else
        exit 1
    fi
}

function create_database {
    if [ $# -eq 0 ]; then
        echo -e "${WHITE}Not enough arguments (missing: \"database name\").${NC}" >&2
        exit 1
    fi

    DB_DATABASE="$1"
    if docker_compose exec db \
        bash -ic "mysql --user=\"\$DB_USERNAME\" --password=\"\$DB_PASSWORD\" -e \"CREATE DATABASE IF NOT EXISTS \\\`$DB_DATABASE\\\` CHARACTER SET utf8 COLLATE utf8_unicode_ci;\"";
    then
        echo -e "${WHITE}✔ Created database${NC}"
    else
        exit 1
    fi
}

function seed_catalog {
    docker_compose exec -u user \
            app bash -ic "php artisan aero:import:products:csv https://aero-data.s3.eu-west-2.amazonaws.com/products.csv"
}

function edit_env_defaults {
    if [ -f "$AERO_DOCKER_PATH/.env" ]; then
        vi "$AERO_DOCKER_PATH/.env"
    fi
}

function publish_project_env {
    if [ ! -f "$PWD/.aero/.env" ]; then
        mkdir -p "$PWD/.aero"
        cp "$AERO_DOCKER_PATH/.aero/.env.example" "$PWD/.aero/.env"
        cp "$AERO_DOCKER_PATH/.aero/.gitignore" "$PWD/.aero/.gitignore"
        vi "$PWD/.aero/.env"
    fi
}

function open_storefront {
    PORT_EXT=""

    if [ $WEB_PORT != 80 ]; then
        PORT_EXT=":$WEB_PORT"
    fi

    open "http://localhost$PORT_EXT"
}

if [ $# -gt 0 ]; then
    if [ "$1" == "start" ]; then
        update_check
        ensure_docker_is_running
        shift 1
        docker_compose up -d "$@"
    elif [ "$1" == "stop" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose down "$@"
    elif [ "$1" == "php" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec app php "$@"
    elif [ "$1" == "composer" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app composer "$@"
    elif [ "$1" == "artisan" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app php artisan "$@"
    elif [ "$1" == "bash" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec -u user app bash "$@"
    elif [ "$1" == "db" ]; then
        update_check
        ensure_container_is_running
        shift 1
        docker_compose exec db bash -ic "mysql --user=\"\$DB_USERNAME\" --password=\"\$DB_PASSWORD\" $@"
    elif [ "$1" == "install" ]; then
        update_check
        if [ -f "$PWD/artisan" ]; then
            echo -e "${WHITE}The current directory is already a project.${NC}"
            exit 1
        fi
        ensure_container_is_running true
        create_database aero
        install_aero "$PROJECT_NAME"
        install_theme "shadow"
        open_storefront
    elif [ "$1" == "setup" ]; then
        update_check
        if [ ! -f "$PWD/.env.example" ]; then
            echo -e "${WHITE}The current directory is not a compatible project.${NC}"
            exit 1
        fi
        if [ -f "$PWD/.env" ]; then
            echo -e "${WHITE}The project appears to already have been setup.${NC}"
            exit 1
        fi
        ensure_container_is_running true
        configure_aero "$PROJECT_NAME"
        open_storefront
    elif [ "$1" == "theme:install" ]; then
        update_check
        ensure_container_is_running
        shift 1
        install_theme "$@"
    elif [ "$1" == "catalog:seed" ]; then
        update_check
        ensure_container_is_running
        seed_catalog
    elif [ "$1" == "env:defaults" ]; then
        update_check
        edit_env_defaults
    elif [ "$1" == "env:project" ]; then
        update_check
        publish_project_env
    elif [ "$1" == "version" ]; then
        update_check
        echo -e "${WHITE}Version: $AERO_DOCKER_VERSION${NC}" >&2
    elif [ "$1" == "self-update" ]; then
        if curl -s https://raw.githubusercontent.com/timrspratt/aero-docker/master/install.sh | bash;
        then
            echo -e "${WHITE}✔ Updated${NC}" >&2
        else
            echo -e "${WHITE}There was a problem updating.${NC}" >&2
            exit 1
        fi
    else
        docker_compose "$@"
    fi
fi
